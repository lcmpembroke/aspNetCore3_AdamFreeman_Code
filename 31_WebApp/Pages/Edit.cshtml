@page "/pages/edit/{id}"
@model EditModel

    <div class="m-2">
        <partial name="_ProductEditor" model="@Model.ViewModel" />
    </div>


    @functions {

        public class EditModel : EditorPageModel
        {
            public EditModel(DataContext dbContext) : base(dbContext) { }

            public async Task OnGetAsync(long id)
            {
                Product p = TempData.ContainsKey("product")             // TempData will have "product" entry if client has already been to Edit, then broken out to SupplierBreakout to create a new supplier
                    ? JsonSerializer.Deserialize<Product>(TempData["product"] as string)    // this may have the new SupplierId set if one has been created
                    :await DataContext.Products.FindAsync(id);
                ViewModel = ProductViewModelFactory.Edit(p, Categories, Suppliers);
            }

            public async Task<IActionResult> OnPostAsync([FromForm] Product product)
            {
                await CheckNewCategory(product);
                if (ModelState.IsValid)
                {
                    product.Category = default;
                    product.Supplier = default;
                    DataContext.Products.Update(product);
                    await DataContext.SaveChangesAsync();
                    return RedirectToPage(nameof(Index));
                }
                ViewModel = ProductViewModelFactory.Edit(product, Categories, Suppliers);
                return Page();

            }
        }
    }
